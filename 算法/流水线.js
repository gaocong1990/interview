/**
 * 一个工厂有m条流水线，来并行完成n个独立的作业，该工厂设置了一个调度系统，在安排作业时，总是优先执行处理时间最短的作业。
现给定流水线个数m，需要完成的作业数n, 每个作业的处理时间分别为t1,t2…tn。请你编程计算处理完所有作业的耗时为多少？
当n>m时，首先处理时间短的m个作业进入流水线，其他的等待，当某个作业完成时，依次从剩余作业中取处理时间最短的进入处理

 */

/**
 * m < n
 * @param {nmuber} m 并行的流水线个数
 * @param {*} n 最大任务数
 * @param {*} arr 每个任务的耗时
 */
/**
 * 解题思路： 排序数组后，从后往前每m的为一组分割数组，然后取每一组里最大的时间加起来就是总耗时。
 */
function pipeline(m, n, arr) {
  /** 排序数组 */
  const sortedArr = arr.sort((a, b) => a - b);
  let cost = 0;
  let t = n % m;
  /**数组长度如果不是m的倍数，从前面截取出多余的数组，取最后一个值 */
  if (t !== 0) {
    cost += arr.splice(0, t)[t - 1];
  }
  /** 每m个一组， 取其最后一个也是最大的一个时间加起来既是总耗时 */

  for (let j = 0; j < arr.length; j++) {
    if ((j + 1) % m == 0) {
      cost += arr[j];
    }
  }

  return cost;
}

console.log(pipeline(3, 6, [8, 4, 3, 2, 10, 20]));
