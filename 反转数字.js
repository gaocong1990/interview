/**
 * 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
 * 如果反转后整数超过 32 位的有符号整数的范围 [−2**31,  2**31 − 1] ，就返回 0。
 * 假设环境不允许存储 64 位整数（有符号或无符号）。
 * https://leetcode.cn/problems/reverse-integer/description/
 */

var reverse = function (x) {
  /**
      思路：对转换完后的十位上的数字开始判断，2**31-1为 2147483647，所以正数如果在翻转的时候已经大于214748364，那再加任何一位都会超出，如果等于214748364，则最后一位小小于等于7
      负数的话同理 -2**31等于-2147483648，所以正数如果在翻转的时候已经小于-214748364，那再加任何一位都会超出，如果等于-214748364，则最后一位大于等于-8
   */
  let res = 0;

  while (x != 0) {
    const tmp = x % 10;
    if (res > 214748364 || (res === 214748364 && tmp > 7)) {
      return 0;
    }

    if (res < -214748364 || (res === -214748364 && tmp < -8)) {
      return 0;
    }
    res = res * 10 + tmp;

    x = parseInt(x / 10);
  }
  return res;
};
